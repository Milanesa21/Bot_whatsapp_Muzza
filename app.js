// librerias para el bot
const {
  createBot,
  createProvider,
  createFlow,
  addKeyword,
  EVENTS,
} = require("@bot-whatsapp/bot");
require("dotenv").config();
const QRPortalWeb = require("@bot-whatsapp/portal");
const BaileysProvider = require("@bot-whatsapp/provider/baileys");
const MockAdapter = require("@bot-whatsapp/database/json");
const path = require("path");
const fs = require("fs");
const chat = require("./chatgpt");
const { handlerAI } = require("./whisper");
const { client } = require("./db");
const { inicializarBaseDeDatos } = require("./db");
const express = require("express");
const app = express(); // Crear una instancia de Express


// En tu backend (app.js o un archivo de rutas)
app.get("/pedidos", async (req, res) => {
  try {
    const result = await client.query("SELECT * FROM pedidos");
    res.json(result.rows);
  } catch (error) {
    console.error("Error al obtener pedidos:", error);
    res.status(500).send("Error al obtener pedidos");
  }
});

// Creaci√≥n de carpeta temporal para archivos de voz si no existe
if (!fs.existsSync("./tmp")) {
  fs.mkdirSync("./tmp");
}

// Datos del pedido
let pedidoActual = {
  tipo: null, // "pizzeria" o "panaderia"
  items: [],
  delivery: null,
  detalles: null,
  nombreCliente: null,
  metodoPago: null,
  horario: null,
  total: 0,
};

// Reset pedido
const resetPedido = () => {
  pedidoActual = {
    tipo: null,
    items: [],
    delivery: null,
    detalles: null,
    nombreCliente: null,
    metodoPago: null,
    horario: null,
    total: 0,
  };
};

// Archivos para mensajes
const menuPizzeriaPath = path.join(__dirname, "mensajes", "menuPizzeria.txt");
const menuPizzeria = fs.readFileSync(menuPizzeriaPath, "utf-8");

const menuPanaderiaPath = path.join(__dirname, "mensajes", "menuPanaderia.txt");
const menuPanaderia = fs.readFileSync(menuPanaderiaPath, "utf-8");

const pathConsultas = path.join(__dirname, "mensajes", "promptConsultas.txt");
const promptConsultas = fs.readFileSync(pathConsultas, "utf-8");

// Flow para convertir notas de voz en texto y procesarlas
const flowVoice = addKeyword(EVENTS.VOICE_NOTE).addAction(
  async (ctx, ctxFn) => {
    try {
      // Convertir nota de voz a texto
      const texto = await handlerAI(ctx);
      console.log("Texto convertido de voz:", texto);

      // Analizar el mensaje para determinar la intenci√≥n
      let intencion = await detectarIntencion(texto);

      // Dirigir al usuario seg√∫n su intenci√≥n
      await procesarIntencion(intencion, texto, ctxFn);
    } catch (error) {
      console.error("Error en procesamiento de voz:", error);
      await ctxFn.flowDynamic(
        "Lo siento, no pude procesar tu mensaje de voz. ¬øPodr√≠as intentar de nuevo o enviarlo por texto?"
      );
    }
  }
);

// Funci√≥n para detectar la intenci√≥n del usuario desde texto
const detectarIntencion = async (texto) => {
  const textoLower = texto.toLowerCase();

  // Palabras clave para cada categor√≠a
  const palabrasPizzeria = [
    "pizza",
    "pizzas",
    "pizzer√≠a",
    "pizzeria",
    "muzzarella",
    "calabresa",
  ];
  const palabrasPanaderia = [
    "pan",
    "panader√≠a",
    "panaderia",
    "facturas",
    "medialunas",
    "torta",
  ];
  const palabrasConsulta = [
    "consulta",
    "pregunta",
    "informaci√≥n",
    "informacion",
    "duda",
    "ayuda",
  ];

  // Verificar coincidencias
  if (palabrasPizzeria.some((palabra) => textoLower.includes(palabra))) {
    return "pizzeria";
  } else if (
    palabrasPanaderia.some((palabra) => textoLower.includes(palabra))
  ) {
    return "panaderia";
  } else if (palabrasConsulta.some((palabra) => textoLower.includes(palabra))) {
    return "consulta";
  }

  // Si no hay coincidencia clara, usar IA para interpretar
  const prompt =
    "Determina si este mensaje se refiere a una pizzer√≠a, panader√≠a o es una consulta general. Responde solo con una palabra: 'pizzeria', 'panaderia' o 'consulta'.";
  const respuesta = await chat(prompt, texto);
  return respuesta.toLowerCase();
};

// Procesar la intenci√≥n detectada
const procesarIntencion = async (intencion, texto, ctxFn) => {
  switch (intencion) {
    case "pizzeria":
      pedidoActual.tipo = "pizzeria";
      await ctxFn.flowDynamic("Has seleccionado la opci√≥n de Pizzer√≠a üçï");
      return ctxFn.gotoFlow(flowMenuPizzeria);
    case "panaderia":
      pedidoActual.tipo = "panaderia";
      await ctxFn.flowDynamic("Has seleccionado la opci√≥n de Panader√≠a ü•ê");
      return ctxFn.gotoFlow(flowMenuPanaderia);
    case "consulta":
      await ctxFn.flowDynamic("Vamos a resolver tu consulta üìù");
      return ctxFn.gotoFlow(flowConsultas);
    default:
      await ctxFn.flowDynamic(
        "No he podido entender tu solicitud. ¬øPodr√≠as elegir una opci√≥n: pizzer√≠a üçï, panader√≠a ü•ê o consulta üìù?"
      );
  }
};

// Flow principal de bienvenida
const flowPrincipal = addKeyword([
  "Hola",
  "alo",
  "ole",
  "Buenos d√≠as",
  "Buenas tardes",
  "Buenas noches",
  "Saludos",
  "Hola, buenas",
  "Hola, buenos d√≠as",
  "Hola, buenas tardes",
  "Hola, buenas noches",
  "Hola, ¬øc√≥mo est√°n?",
  "Buen d√≠a",
  "Hola, buen d√≠a",
  "Hola, buenas noches",
  "Hola, buenas tardes",
  "Hola, ¬øc√≥mo est√°s?",
  "Hola, ¬øc√≥mo est√°?",
  "ola",
  "holi",
  "holis",
  "holas",
  "holas",
  "holus",
  "oa",
])
  .addAction(async (_, { flowDynamic }) => {
    // Reset el pedido al inicio
    resetPedido();
    await flowDynamic(
      "Hola, aprovech√° un maravilloso descuento pidiendo por nuestra p√°gina! https://pedidos.masdelivery.com/muzza "
    );
  })
  .addAnswer("¬øQu√© deseas hacer hoy?")
  .addAnswer(
    [
      "1Ô∏è‚É£ Ver nuestro men√∫ de *Pizzer√≠a* üçï",
      "2Ô∏è‚É£ Ver nuestro men√∫ de *Panader√≠a* ü•ê",
      "3Ô∏è‚É£ Ver nuestro men√∫ de *S√°ndwiches* ü•™",
      "4Ô∏è‚É£ Realizar una *Consulta* üìù",
      "\nPuedes responder con el n√∫mero o escribir lo que deseas.",
    ].join("\n"),
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic, fallBack }) => {
      const respuesta = ctx.body.toLowerCase();

      if (respuesta.includes("1") || respuesta.includes("pizz")) {
        pedidoActual.tipo = "pizzeria";
        await flowDynamic("Has seleccionado la opci√≥n de Pizzer√≠a üçï");
        return gotoFlow(flowMenuPizzeria);
      } else if (respuesta.includes("2") || respuesta.includes("pan")) {
        pedidoActual.tipo = "panaderia";
        await flowDynamic("Has seleccionado la opci√≥n de Panader√≠a ü•ê");
        return gotoFlow(flowMenuPanaderia);
      } else if (respuesta.includes("3") || respuesta.includes("sandwich")) {
        pedidoActual.tipo = "sandwiches";
        await flowDynamic("Has seleccionado la opci√≥n de S√°ndwiches ü•™");
        return gotoFlow(flowMenuSandwiches);
      } else if (respuesta.includes("4") || respuesta.includes("consul")) {
        await flowDynamic("Vamos a resolver tu consulta üìù");
        return gotoFlow(flowConsultas);
      } else {
        return fallBack(
          "Por favor, selecciona una opci√≥n v√°lida: 1 (Pizzer√≠a), 2 (Panader√≠a), 3 (S√°ndwiches) o 4 (Consulta)"
        );
      }
    }
  );

// Flow para el men√∫ de Pizzer√≠a
const flowMenuPizzeria = addKeyword(EVENTS.ACTION)
  .addAnswer("üçï *MEN√ö DE PIZZER√çA* üçï")
  .addAnswer(
    "Las pizzas son 100% artesanales. Elige una opci√≥n:\n\n" +
      "1. Muzzarella (Chica: $14.000 - Grande: $16.000)\n" +
      "2. Doble Muzzarella (Chica: $17.000 - Grande: $19.000)\n" +
      "3. R√∫cula (Chica: $17.000 - Grande: $19.000)\n" +
      "4. R√∫cula y Jam√≥n Crudo (Chica: $19.000 - Grande: $21.000)\n" +
      "5. Jam√≥n Crudo (Chica: $18.000 - Grande: $20.000)\n" +
      "6. Especial (Chica: $16.000 - Grande: $18.000)\n" +
      "7. Completa (Chica: $17.000 - Grande: $19.000)\n" +
      "8. Capresse (Chica: $15.000 - Grande: $17.000)\n" +
      "9. Pepperoni (Chica: $16.000 - Grande: $18.000)\n" +
      "10. Muzza Picante (Chica: $14.000 - Grande: $16.000)\n" +
      "11. Otras Variedades (Consultar precios)",
    { capture: true },
    async (ctx, { flowDynamic, fallBack, gotoFlow }) => {
      const seleccion = ctx.body;
      if (!isNaN(seleccion)) {
        const opcion = parseInt(seleccion);
        let item = {
          nombre: "",
          precioChica: 0,
          precioGrande: 0,
        };

        switch (opcion) {
          case 1:
            item.nombre = "Muzzarella";
            item.precioChica = 14000;
            item.precioGrande = 16000;
            break;
          case 2:
            item.nombre = "Doble Muzzarella";
            item.precioChica = 17000;
            item.precioGrande = 19000;
            break;
          case 3:
            item.nombre = "R√∫cula";
            item.precioChica = 17000;
            item.precioGrande = 19000;
            break;
          case 4:
            item.nombre = "R√∫cula y Jam√≥n Crudo";
            item.precioChica = 19000;
            item.precioGrande = 21000;
            break;
          case 5:
            item.nombre = "Jam√≥n Crudo";
            item.precioChica = 18000;
            item.precioGrande = 20000;
            break;
          case 6:
            item.nombre = "Especial";
            item.precioChica = 16000;
            item.precioGrande = 18000;
            break;
          case 7:
            item.nombre = "Completa";
            item.precioChica = 17000;
            item.precioGrande = 19000;
            break;
          case 8:
            item.nombre = "Capresse";
            item.precioChica = 15000;
            item.precioGrande = 17000;
            break;
          case 9:
            item.nombre = "Pepperoni";
            item.precioChica = 16000;
            item.precioGrande = 18000;
            break;
          case 10:
            item.nombre = "Muzza Picante";
            item.precioChica = 14000;
            item.precioGrande = 16000;
            break;
          case 11:
            await flowDynamic(
              "Otras variedades disponibles:\n" +
                "Jam√≥n, Morrones y Huevo: $19.000 - $21.000\n" +
                "Jam√≥n, Morrones y Palmitos: $22.000 - $24.000\n" +
                "Champignon: $18.000 - $20.000\n" +
                "Tomate, Calabresa y Salsa Picante: $16.000 - $18.000\n" +
                "Tomate, Jam√≥n y Huevo: $18.000 - $20.000\n" +
                "Anchoas: $18.000 - $20.000\n" +
                "Palmitos: $18.000 - $20.000\n" +
                "Cuatro Quesos: $22.000 - $24.000\n" +
                "Muzza: $22.000 - $24.000\n" +
                "Napolitana y Jam√≥n: $17.000 - $19.000\n" +
                "Fugazzeta: $16.000 - $18.000\n" +
                "Fugazzeta y Jam√≥n: $18.000 - $20.000\n" +
                "Muzza Especial: $20.000 - $22.000\n" +
                "Calabresa: $17.000 - $19.000\n" +
                "Roquefort: $18.000 - $20.000\n" +
                "Ciruela a la Tocineta: $20.000 - $22.000\n" +
                "Pollo a la Barbacoa: $18.000 - $20.000"
            );
            return fallBack(); // Volver al men√∫ anterior
          default:
            return fallBack("Por favor, selecciona una opci√≥n v√°lida (1-11)");
        }

        // Guardar el item en el pedido actual
        pedidoActual.items.push(item);

        // Preguntar por el tama√±o
        await flowDynamic(
          `Has seleccionado ${item.nombre}. ¬øQu√© tama√±o deseas?\n\n` +
            "1. Chica\n" +
            "2. Grande"
        );

        // Capturar la selecci√≥n del tama√±o
        return gotoFlow(flowSeleccionTama√±o); // Redirigir al flujo de selecci√≥n de tama√±o
      } else {
        return fallBack("Por favor, selecciona una opci√≥n v√°lida (1-11)");
      }
    }
  );

// Flujo para seleccionar el tama√±o de la pizza
const flowSeleccionTama√±o = addKeyword(EVENTS.ACTION).addAction(
  { capture: true },
  async (ctx, { flowDynamic, gotoFlow, fallBack }) => {
    const seleccionTama√±o = ctx.body.toLowerCase();
    const item = pedidoActual.items[pedidoActual.items.length - 1]; // Obtener el √∫ltimo item agregado

    if (seleccionTama√±o.includes("1") || seleccionTama√±o.includes("chica")) {
      item.precio = item.precioChica;
      item.tama√±o = "Chica";
    } else if (
      seleccionTama√±o.includes("2") ||
      seleccionTama√±o.includes("grande")
    ) {
      item.precio = item.precioGrande;
      item.tama√±o = "Grande";
    } else {
      return fallBack(
        "Por favor, selecciona un tama√±o v√°lido: 1 (Chica) o 2 (Grande)"
      );
    }

    // Actualizar el total del pedido
    pedidoActual.total += item.precio;

    await flowDynamic(
      `Has agregado ${item.nombre} (${item.tama√±o}) - $${item.precio} a tu pedido. Total actual: $${pedidoActual.total}`
    );

    // Redirigir al flujo para agregar m√°s productos
    return gotoFlow(flowAgregarMas);
  }
);

// Flow para el men√∫ de Panader√≠a
const flowMenuPanaderia = addKeyword(EVENTS.ACTION)
  .addAnswer("ü•ê *MEN√ö DE PANADER√çA* ü•ê")
  .addAnswer(
    "Elige una opci√≥n:\n\n" +
      "1. Facturas\n" +
      "2. Grisines\n" +
      "3. S√°ndwich de miga\n" +
      "4. Otros productos",
    { capture: true },
    async (ctx, { flowDynamic, fallBack, gotoFlow }) => {
      const seleccion = ctx.body;
      if (!isNaN(seleccion)) {
        const opcion = parseInt(seleccion);
        let item = {
          nombre: "",
          precio: 0,
        };

        switch (opcion) {
          case 1:
            item.nombre = "Facturas";
            item.precio = 8000; // Precio de ejemplo
            break;
          case 2:
            item.nombre = "Grisines";
            item.precio = 6000; // Precio de ejemplo
            break;
          case 3:
            item.nombre = "S√°ndwich de miga";
            item.precio = 7000; // Precio de ejemplo
            break;
          case 4:
            await flowDynamic(
              "Otros productos disponibles:\n" +
                "Medialunas, Pan de leche, Bollos, Tortitas negras, Chipitas, etc."
            );
            return fallBack();
          default:
            return fallBack("Por favor, selecciona una opci√≥n v√°lida (1-4)");
        }

        pedidoActual.items.push(item);
        pedidoActual.total += item.precio;

        await flowDynamic(
          `Has agregado ${item.nombre} - $${item.precio} a tu pedido. Total actual: $${pedidoActual.total}`
        );
        return gotoFlow(flowAgregarMas);
      } else {
        return fallBack("Por favor, selecciona una opci√≥n v√°lida (1-4)");
      }
    }
  );


  const flowMenuSandwiches = addKeyword(EVENTS.ACTION)
    .addAnswer("ü•™ *MEN√ö DE S√ÅNDWICHES* ü•™")
    .addAnswer(
      "Elige un s√°ndwich:\n\n" +
        "1. Hamburguesa Especial ($9.000)\n" +
        "2. Hamburguesa Completa ($9.500)\n" +
        "3. S√°ndwich de Pollo Especial ($9.500)\n" +
        "4. S√°ndwich de Pollo Completo ($10.000)\n" +
        "5. Alito de Carne Especial (Precio no indicado)\n" +
        "6. Alito de Carne Completo (Precio no indicado)\n" +
        "7. Alito de Pollo Especial ($14.000)\n" +
        "8. Alito de Pollo Completo ($15.000)\n" +
        "9. Tostado de Jam√≥n y Queso ($6.000)",
      { capture: true },
      async (ctx, { flowDynamic, fallBack, gotoFlow }) => {
        const seleccion = ctx.body;
        if (!isNaN(seleccion)) {
          const opcion = parseInt(seleccion);
          let item = {
            nombre: "",
            precio: 0,
          };

          switch (opcion) {
            case 1:
              item.nombre = "Hamburguesa Especial";
              item.precio = 9000;
              break;
            case 2:
              item.nombre = "Hamburguesa Completa";
              item.precio = 9500;
              break;
            case 3:
              item.nombre = "S√°ndwich de Pollo Especial";
              item.precio = 9500;
              break;
            case 4:
              item.nombre = "S√°ndwich de Pollo Completo";
              item.precio = 10000;
              break;
            case 5:
              item.nombre = "Alito de Carne Especial";
              item.precio = 12000; // Precio estimado
              break;
            case 6:
              item.nombre = "Alito de Carne Completo";
              item.precio = 13000; // Precio estimado
              break;
            case 7:
              item.nombre = "Alito de Pollo Especial";
              item.precio = 14000;
              break;
            case 8:
              item.nombre = "Alito de Pollo Completo";
              item.precio = 15000;
              break;
            case 9:
              item.nombre = "Tostado de Jam√≥n y Queso";
              item.precio = 6000;
              break;
            default:
              return fallBack("Por favor, selecciona una opci√≥n v√°lida (1-9)");
          }

          pedidoActual.items.push(item);
          pedidoActual.total += item.precio;

          await flowDynamic(
            `Has agregado ${item.nombre} - $${item.precio} a tu pedido. Total actual: $${pedidoActual.total}`
          );
          return gotoFlow(flowAgregarMas);
        } else {
          return fallBack("Por favor, selecciona una opci√≥n v√°lida (1-9)");
        }
      }
    );

// Flow para preguntar si desea agregar m√°s items
const flowAgregarMas = addKeyword(EVENTS.ACTION)
  .addAnswer("¬øDeseas agregar algo m√°s a tu pedido?")
  .addAnswer(
    ["1Ô∏è‚É£ S√≠, agregar m√°s productos", "2Ô∏è‚É£ No, continuar con el pedido"].join(
      "\n"
    ),
    { capture: true },
    async (ctx, { gotoFlow, fallBack }) => {
      const respuesta = ctx.body.toLowerCase();

      if (
        respuesta.includes("1") ||
        respuesta.includes("si") ||
        respuesta.includes("s√≠")
      ) {
        // Verificar si el √∫ltimo pedido fue de pizzer√≠a, panader√≠a o s√°ndwiches
        if (pedidoActual.tipo === "pizzeria") {
          return gotoFlow(flowMenuPizzeria);
        } else if (pedidoActual.tipo === "panaderia") {
          return gotoFlow(flowMenuPanaderia);
        } else if (pedidoActual.tipo === "sandwiches") {
          return gotoFlow(flowMenuSandwiches);
        }
      } else if (respuesta.includes("2") || respuesta.includes("no")) {
        return gotoFlow(flowDelivery);
      } else {
        return fallBack(
          "Por favor, indica si deseas agregar m√°s productos (1) o continuar con el pedido (2)"
        );
      }
    }
  );

// Flow para preguntar sobre delivery
const flowDelivery = addKeyword(EVENTS.ACTION)
  .addAnswer("¬øC√≥mo deseas recibir tu pedido?")
  .addAnswer(
    [
      "1Ô∏è‚É£ Delivery a domicilio (+$500)",
      "2Ô∏è‚É£ Paso a retirarlo personalmente",
    ].join("\n"),
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic, fallBack }) => {
      const respuesta = ctx.body.toLowerCase();

      if (
        respuesta.includes("1") ||
        respuesta.includes("delivery") ||
        respuesta.includes("domicilio")
      ) {
        pedidoActual.delivery = true;
        pedidoActual.total += 500; // Cargo extra por delivery
        await flowDynamic(
          "Has seleccionado delivery a domicilio. Se ha agregado un cargo de $500. Total actualizado: $" +
            pedidoActual.total
        );
        return gotoFlow(flowDetallesPedido);
      } else if (
        respuesta.includes("2") ||
        respuesta.includes("retir") ||
        respuesta.includes("paso")
      ) {
        pedidoActual.delivery = false;
        await flowDynamic(
          "Has seleccionado retirar personalmente. Total del pedido: $" +
            pedidoActual.total
        );
        return gotoFlow(flowDetallesPedido);
      } else {
        return fallBack(
          "Por favor, indica si deseas delivery (1) o retirarlo personalmente (2)"
        );
      }
    }
  );

  // Flow para preguntar la direcci√≥n en caso de delivery
const flowDireccion = addKeyword(EVENTS.ACTION).addAnswer(
  "Por favor, indica la direcci√≥n a la que deseas recibir tu pedido:",
  { capture: true },
  async (ctx, { gotoFlow }) => {
    pedidoActual.direccion = ctx.body; // Guardar la direcci√≥n
    return gotoFlow(flowDetallesPedido); // Continuar con el flujo de detalles
  }
);

// Flow para detalles del pedido
const flowDetallesPedido = addKeyword(EVENTS.ACTION).addAnswer(
  "¬øDeseas agregar alg√∫n detalle espec√≠fico en tu pedido? (por ejemplo, sin cebolla, bien cocido, etc.)",
  { capture: true },
  async (ctx, { gotoFlow }) => {
    pedidoActual.detalles = ctx.body;
    return gotoFlow(flowNombreCliente);
  }
);

// Flow para nombre del cliente
const flowNombreCliente = addKeyword(EVENTS.ACTION).addAnswer(
  "Por favor, indica a nombre de qui√©n estar√° el pedido",
  { capture: true },
  async (ctx, { gotoFlow }) => {
    pedidoActual.nombreCliente = ctx.body;
    return gotoFlow(flowMetodoPago);
  }
);

// Flow para m√©todo de pago
const flowMetodoPago = addKeyword(EVENTS.ACTION)
  .addAnswer("¬øC√≥mo deseas pagar?")
  .addAnswer(
    ["1Ô∏è‚É£ Efectivo", "2Ô∏è‚É£ Transferencia"].join("\n"),
    { capture: true },
    async (ctx, { gotoFlow, fallBack }) => {
      const respuesta = ctx.body.toLowerCase();

      if (respuesta.includes("1") || respuesta.includes("efectivo")) {
        pedidoActual.metodoPago = "Efectivo";
        return gotoFlow(flowHorario);
      } else if (respuesta.includes("2") || respuesta.includes("transf")) {
        pedidoActual.metodoPago = "Transferencia";
        return gotoFlow(flowHorario);
      } else {
        return fallBack(
          "Por favor, indica si pagar√°s con efectivo (1) o transferencia (2)"
        );
      }
    }
  );


// Flow para horario de entrega
const flowHorario = addKeyword(EVENTS.ACTION)
  .addAnswer("¬øPara qu√© horario deseas tu pedido?")
  .addAnswer(
    ["1Ô∏è‚É£ Lo antes posible", "2Ô∏è‚É£ Para un horario espec√≠fico"].join("\n"),
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic }) => {
      const respuesta = ctx.body.toLowerCase();

      if (
        respuesta.includes("1") ||
        respuesta.includes("antes") ||
        respuesta.includes("posible")
      ) {
        pedidoActual.horario = "Lo antes posible";
        return gotoFlow(flowConfirmacionPedido);
      } else if (
        respuesta.includes("2") ||
        respuesta.includes("especifico") ||
        respuesta.includes("espec√≠fico")
      ) {
        // Redirigir a un flujo espec√≠fico para capturar el horario
        return gotoFlow(flowHorarioEspecifico);
      } else {
        // Si el formato no es v√°lido
        await flowDynamic(
          "Por favor, selecciona una opci√≥n v√°lida: 1 (Lo antes posible) o 2 (Para un horario espec√≠fico)"
        );
        return fallBack();
      }
    }
  );

// Nuevo flow para capturar un horario espec√≠fico
const flowHorarioEspecifico = addKeyword(EVENTS.ACTION)
  .addAnswer(
    "¬øPara qu√© horario espec√≠fico lo deseas? (Ej: 20:30)",
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic }) => {
      // Capturar el horario ingresado
      const horarioIngresado = ctx.body;
      
      // Validar formato de horario (simple)
      if (/\d+[:]\d+/.test(horarioIngresado) || horarioIngresado.includes(":")) {
        pedidoActual.horario = horarioIngresado;
        await flowDynamic(`Perfecto, tu pedido ser√° para las ${horarioIngresado}`);
        return gotoFlow(flowConfirmacionPedido);
      } else {
        await flowDynamic("Por favor, ingresa un horario v√°lido (Ej: 20:30)");
        return fallBack();
      }
    }
  );

  
// Flow de confirmaci√≥n final del pedido
const flowConfirmacionPedido = addKeyword(EVENTS.ACTION)
  .addAction(async (_, { flowDynamic }) => {
    // Crear resumen del pedido
    let resumen = [
      "üßæ *RESUMEN DE TU PEDIDO* üßæ",
      `üë§ A nombre de: *${pedidoActual.nombreCliente}*`,
      "",
      "üìã *Productos:*",
    ];

    pedidoActual.items.forEach((item, index) => {
      resumen.push(`${index + 1}. ${item.nombre} - $${item.precio}`);
    });

    resumen = resumen.concat([
      "",
      `üöö *Entrega:* ${
        pedidoActual.delivery ? "Delivery (+$500)" : "Retiro en local"
      }`,
      pedidoActual.delivery
        ? `üìç *Direcci√≥n:* ${pedidoActual.direccion}`
        : "",
      `üí∞ *M√©todo de pago:* ${pedidoActual.metodoPago}`,
      `‚è∞ *Horario:* ${pedidoActual.horario}`,
      `üí≤ *Total a pagar:* $${pedidoActual.total}`,
      "",
    ]);

    if (pedidoActual.detalles && pedidoActual.detalles.trim() !== "") {
      resumen.push(`üìù *Detalles:* ${pedidoActual.detalles}`);
    }

    await flowDynamic(resumen.join("\n"));
  })
  .addAnswer("¬øConfirmas este pedido?")
  .addAnswer(
    ["1Ô∏è‚É£ S√≠, confirmar pedido", "2Ô∏è‚É£ No, cancelar pedido"].join("\n"),
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic, fallBack }) => {
      const respuesta = ctx.body.toLowerCase();

      if (
        respuesta.includes("1") ||
        respuesta.includes("si") ||
        respuesta.includes("s√≠") ||
        respuesta.includes("conf")
      ) {
        // Guardar el pedido en la base de datos
        try {
          const query = `
            INSERT INTO pedidos (tipo, items, delivery, direccion, detalles, nombre_cliente, metodo_pago, horario, total)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
          `;
          const values = [
            pedidoActual.tipo,
            JSON.stringify(pedidoActual.items), // Convertir items a JSON
            pedidoActual.delivery,
            pedidoActual.direccion || null, // Guardar la direcci√≥n (o null si no hay)
            pedidoActual.detalles,
            pedidoActual.nombreCliente,
            pedidoActual.metodoPago,
            pedidoActual.horario,
            pedidoActual.total,
          ];

          await client.query(query, values); // Ejecutar la consulta
          console.log("Pedido guardado en la base de datos");

          await flowDynamic(
            [
              "‚úÖ *¬°Pedido confirmado!* ‚úÖ",
              "",
              "Tu pedido ha sido registrado con √©xito.",
              pedidoActual.delivery
                ? `Te enviaremos tu pedido a la direcci√≥n: ${pedidoActual.direccion}`
                : "Puedes pasar a retirarlo por nuestro local.",
              "",
              "¬°Gracias por tu compra! üòä",
            ].join("\n")
          );
        } catch (error) {
          console.error(
            "Error al guardar el pedido en la base de datos:",
            error
          );
          await flowDynamic(
            "Hubo un error al guardar tu pedido. Por favor, int√©ntalo de nuevo."
          );
        } finally {
          resetPedido(); // Reiniciar el pedido
          return; // Detener la conversaci√≥n hasta que el usuario env√≠e un nuevo mensaje
        }
      } else if (
        respuesta.includes("2") ||
        respuesta.includes("no") ||
        respuesta.includes("cancel")
      ) {
        await flowDynamic(
          [
            "‚ùå *Pedido cancelado* ‚ùå",
            "",
            "Has cancelado tu pedido. Puedes iniciar uno nuevo cuando lo desees.",
            "",
            "¬°Gracias por contactarnos! üòä",
          ].join("\n")
        );
        resetPedido();
        return gotoFlow(flowPrincipal);
      } else {
        return fallBack(
          "Por favor, indica si confirmas (1) o cancelas (2) el pedido"
        );
      }
    }
  );

  
// Flow de consultas
const flowConsultas = addKeyword(EVENTS.ACTION)
  .addAnswer("üìù *Consultas* üìù")
  .addAnswer(
    "¬øEn qu√© podemos ayudarte?",
    { capture: true },
    async (ctx, ctxFn) => {
      const prompt = promptConsultas;
      const consulta = ctx.body;
      const answer = await chat(prompt, consulta);
      await ctxFn.flowDynamic(answer);

      // Preguntar si desea hacer un pedido despu√©s de la consulta
      await ctxFn.flowDynamic(
        [
          "¬øDeseas realizar un pedido ahora?",
          "",
          "1Ô∏è‚É£ S√≠, quiero hacer un pedido",
          "2Ô∏è‚É£ No, quiero hacer otra consulta",
        ].join("\n")
      );

      return ctxFn.fallBack();
    }
  )
  .addAction(
    { capture: true },
    async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
      const respuesta = ctx.body.toLowerCase();

      if (
        respuesta.includes("1") ||
        respuesta.includes("si") ||
        respuesta.includes("s√≠") ||
        respuesta.includes("pedido")
      ) {
        // Si elige hacer un pedido, lo redirigimos al flujo principal
        await flowDynamic("Perfecto, vamos a iniciar un nuevo pedido. üçïü•êü•™");
        return gotoFlow(flowPrincipal);
      } else if (
        respuesta.includes("2") ||
        respuesta.includes("no") ||
        respuesta.includes("otra consulta")
      ) {
        // Si elige hacer otra consulta, se queda en el flujo de consultas
        await flowDynamic("Claro, ¬øen qu√© m√°s podemos ayudarte? üìù");
        return fallBack(); // Vuelve a preguntar por una nueva consulta
      } else {
        // Si la opci√≥n no es v√°lida, se aclaran las opciones disponibles
        await flowDynamic(
          [
            "Por favor, selecciona una opci√≥n v√°lida:",
            "",
            "1Ô∏è‚É£ S√≠, quiero hacer un pedido",
            "2Ô∏è‚É£ No, quiero hacer otra consulta",
          ].join("\n")
        );
        return fallBack(); // Vuelve a preguntar por la opci√≥n
      }
    }
  );

// En caso que no se reconozca la palabra
const flowWelcome = addKeyword(EVENTS.WELCOME).addAnswer(
  "Lo siento, pero no reconozco esa palabra. Si deseas hacer un pedido o hacer una consulta, escribenos hola y empezaremos con tu pedido"
);


// Inicializar la base de datos antes de iniciar el bot
inicializarBaseDeDatos()
  .then(() => {
    console.log("Base de datos inicializada correctamente.");
    main();
  })
  .catch((error) => {
    console.error("Error al inicializar la base de datos:", error);
    process.exit(1); // Salir del proceso si hay un error cr√≠tico
  });

// Inicializaci√≥n del bot
const main = async () => {
  try {
    const adapterDB = new MockAdapter();
    const adapterFlow = createFlow([
      flowPrincipal,
      flowWelcome,
      flowMenuPizzeria,
      flowMenuPanaderia,
      flowMenuSandwiches,
      flowSeleccionTama√±o,
      flowAgregarMas,
      flowDelivery,
      flowDetallesPedido,
      flowNombreCliente,
      flowMetodoPago,
      flowHorario,
      flowHorarioEspecifico,
      flowConfirmacionPedido,
      flowConsultas,
      flowVoice,
    ]);
    const adapterProvider = createProvider(BaileysProvider);

    createBot({
      flow: adapterFlow,
      provider: adapterProvider,
      database: adapterDB,
    });

     app.listen(4000, () => {
       console.log("Servidor backend corriendo en http://localhost:4000");
     });

    // Iniciar el servidor una sola vez
    QRPortalWeb({ port: 5000 }); // Cambia el puerto a 5000 o cualquier otro disponible
    console.log("Servidor iniciado en http://localhost:5000");
  } catch (error) {
    console.error("Error en main:", error);
  }
};
